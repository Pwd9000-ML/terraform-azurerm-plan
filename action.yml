name: 'Terraform Plan for AZURE' 
description: 'Terraform plan with AzureRM backend - uploads plan as workflow artifact (Used with: `Pwd9000-ML/terraform-azurerm-apply`)'

inputs:
  path:
    description: '(Optional) Specifies the path of the root terraform module.'
    required: false
    type: string
    default: .

  plan_mode:
    description: '(Optional) Specify plan mode. Valid options are "deploy" or "destroy". Default=deploy.'
    required: false
    type: string
    default: deploy

  tf_version:
    description: '(Optional) Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
    required: false
    type: string
    default: latest

  tf_vars_file:
    description: '(Required) Specifies the Terraform TFVARS file relevant to module path.'
    required: true
    type: string

  tf_key:
    description: '(Required) Specifies the Terraform state file name for this plan.'
    required: true
    type: string

  az_resource_group:
    description: '(Required) Specifies the Azure Resource Group where the backend storage account is hosted.'
    required: true
    type: string

  az_storage_acc:
    description: '(Required) Specifies the Azure Storage Account where the backend state is hosted.'
    required: true
    type: string

  az_container_name:
    description: '(Required) Specifies the Azure Storage account container where backend Terraform state is hosted.'
    required: true
    type: string

  enable_TFSEC:
    description: '(Optional) Enables TFSEC IaC scans and code quality checks on Terraform configurations'
    required: false
    type: boolean
    default: false

  arm_client_id:
    description: 'Specifies the Azure ARM CLIENT ID.'
    required: true

  arm_client_secret:
    description: 'Specifies the Azure ARM CLIENT SECRET.'
    required: true

  arm_subscription_id:
    description: 'Specifies the Azure ARM SUBSCRIPTION ID.'
    required: true

  arm_tenant_id:
    description: 'Specifies the Azure ARM TENANT ID.'
    required: true

  github_token:
    description: 'Specify a valid GITHUB TOKEN.'
    required: true

# https://actions-cool.github.io/github-action-branding/
branding:
  icon: 'align-left'
  color: 'blue'

runs:
  using: "composite"

  steps:
    - name: Set Environment VARS
      shell: bash
      id: vars
      run: |
          echo "ARM_CLIENT_ID=${{ inputs.arm_client_id }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ inputs.arm_client_secret }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ inputs.arm_subscription_id }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ inputs.arm_tenant_id }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ inputs.github_token }}" >> $GITHUB_ENV
      working-directory: ${{ inputs.path }}

    - name: Scan IaC - tfsec
      if: ${{ inputs.enable_TFSEC == 'true' }}
      uses: aquasecurity/tfsec-sarif-action@v0.1.3
      with:
        sarif_file: tfsec.sarif

    - name: Upload SARIF file
      if: ${{ inputs.enable_TFSEC == 'true' }}
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: tfsec.sarif

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.2
      with:
        terraform_version: ${{ inputs.tf_version }}
        terraform_wrapper: true

    - name: Terraform Format
      shell: bash
      id: fmt
      run: terraform fmt --check --recursive
      working-directory: ${{ inputs.path }}

    - name: PR Format
      if: github.event_name == 'pull_request'
      uses: robburger/terraform-pr-commenter@v1.5.0
      with:
        commenter_type: fmt
        commenter_input: ${{ format('{0}{1}', steps.fmt.outputs.stdout, steps.fmt.outputs.stderr) }}
        commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}

    - name: Terraform Init
      shell: bash
      id: init
      run: terraform init --backend-config="storage_account_name=${{ inputs.az_storage_acc }}" --backend-config="container_name=${{ inputs.az_container_name }}" --backend-config="resource_group_name=${{ inputs.az_resource_group }}" --backend-config="key=${{ inputs.tf_key }}"
      working-directory: ${{ inputs.path }}

    - name: PR Init
      if: github.event_name == 'pull_request'
      uses: robburger/terraform-pr-commenter@v1.5.0
      with:
        commenter_type: init
        commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
        commenter_exitcode: ${{ steps.init.outputs.exitcode }}

    - name: Terraform Validate
      shell: bash
      id: validate
      run: terraform validate
      working-directory: ${{ inputs.path }}

    - name: PR Validate
      if: github.event_name == 'pull_request'
      uses: robburger/terraform-pr-commenter@v1.5.0
      with:
        commenter_type: validate
        commenter_input: ${{ format('{0}{1}', steps.validate.outputs.stdout, steps.validate.outputs.stderr) }}
        commenter_exitcode: ${{ steps.validate.outputs.exitcode }}

    - name: Terraform Plan Deploy
      if: ${{ inputs.plan_mode == 'deploy' }}
      shell: bash
      id: deploy_plan
      run: terraform plan --var-file=${{ inputs.tf_vars_file }} --out=deploy_plan.tfplan
      working-directory: ${{ inputs.path }}

    - name: PR Plan Deploy
      if: ${{ inputs.plan_mode == 'deploy' && github.event_name == 'pull_request' }}
      uses: robburger/terraform-pr-commenter@v1.5.0
      with:
        commenter_type: plan
        commenter_input: ${{ format('{0}{1}', steps.deploy_plan.outputs.stdout, steps.deploy_plan.outputs.stderr) }}
        commenter_exitcode: ${{ steps.deploy_plan.outputs.exitcode }}

    - name: Terraform Plan Destroy
      if: ${{ inputs.plan_mode != 'deploy' }}
      shell: bash
      id: destroy_plan
      run: terraform plan --var-file=${{ inputs.tf_vars_file }} --destroy --out=destroy_plan.tfplan
      working-directory: ${{ inputs.path }}

    - name: PR Plan Destroy
      if:  ${{ inputs.plan_mode != 'deploy' && github.event_name == 'pull_request' }} 
      uses: robburger/terraform-pr-commenter@v1.5.0
      with:
        commenter_type: plan
        commenter_input: ${{ format('{0}{1}', steps.destroy_plan.outputs.stdout, steps.destroy_plan.outputs.stderr) }}
        commenter_exitcode: ${{ steps.destroy_plan.outputs.exitcode }}

    - name: Compress TF Plan artifact
      shell: bash
      run: zip -r ${{ inputs.plan_mode }}${{ inputs.tf_key }}.zip ./*
      working-directory: ${{ inputs.path }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        name: "${{ inputs.plan_mode }}-${{ inputs.tf_key }}"
        path: "${{ inputs.path }}/${{ inputs.plan_mode }}${{ inputs.tf_key }}.zip"
        retention-days: 5